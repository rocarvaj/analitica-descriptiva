[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analítica descriptiva de datos con Python",
    "section": "",
    "text": "Requisitos\nPese a que los contenidos de este apunte son introductorios, es necesario que el lector tenga un conocimiento básico de Python.\n\n\n\n\nMcKinney, Wes. 2017. Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython. 2nd ed. O’Reilly Media, Inc."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "See Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "01-tablas-de-datos.html",
    "href": "01-tablas-de-datos.html",
    "title": "1  Tablas de datos",
    "section": "",
    "text": "Responder a esta pregunta se siente muy parecido a responder a “¿qué es un vaso de agua?”, parece ser difícil hacerlo sin caer en algo de redundancia. Pero bueno, aquí vamos:\n\nUna tabla de datos es una representación de cualquier tipo de información en forma tabular, es decir, ordenada en filas y columnas.\n\nLos ejemplos de tablas de datos son muchos y los hay muy antiguos como esta tableta de arcilla que data de alrededor del 3000 A.C., usada para mantener cuentas de granos de malta y cebada1:\n\n\n\nTableta de arcilla\n\n\nOtro ejemplo más conocido, es la tabla periódica de los elementos2:\n\n\n\nTabla periódica\n\n\nLas tablas de datos que en realidad nos interesan aquí son más tradicionales: aquellas que tienen información representada por números o cadenas de caracteres (o strings).\n\n\nNotemos que tal y como señala la definición de tabla de datos que hemos entregado más arriba, una tabla es sólo una representación de ciertos datos. Esto implica que puede haber más de una tabla para representar a un conjunto de datos.\nPor ejemplo, consideremos la siguiente tabla que representa los resultados de dos exámenes médicos para tres personas:\n\n\n\n\nExamen 1\nExamen 2\n\n\n\n\nJuan\n10\n2\n\n\nClara\n15\n5\n\n\nLin\n9\n4\n\n\n\nOtra manera de representar la misma información es simplemente trasponiendo la tabla anterior (cambiando las filas por columnas):\n\n\n\n\nJuan\nClara\nLin\n\n\n\n\nExamen 1\n10\n15\n9\n\n\nExamen 2\n2\n5\n4\n\n\n\nUna tercera manera, que puede parecer un poco menos eficiente, es la siguiente:\n\n\n\nNombre\nExamen\nResultado\n\n\n\n\nJuan\nExamen 1\n10\n\n\nClara\nExamen 1\n15\n\n\nLin\nExamen 1\n9\n\n\nJuan\nExamen 2\n2\n\n\nClara\nExamen 2\n5\n\n\nLin\nExamen 2\n4\n\n\n\nEn esta tabla parece que estuviésemos repitiendo información, sin embargo tiene una característica que la hacen mucho más sencilla de manipular, analizar y visualizar:\n\nCada columna corresponde a una variable y cada fila corresponde a una observación.\n\nUna tabla de datos con esta característica se dice larga (o también tidy).\nLa razón por la que este tipo de tablas es útil tiene que ver principalmente con que entrega una manera estandarizada de representar datos. Quien hace el análisis (o incluso un computador) puede extraer fácilmente cualquier variable que sea de interés.\nEn nuestro ejemplo, las dos primeras versiones de la tabla no es claro (a menos que alguien nos lo explique previamente) dónde están las variables y las observaciones. Por otra parte, en una tabla larga, el rol de filas y columnas es claro.\nLa utilidad de este formato se hará más evidente a medida que avancemos en las siguientes secciones."
  },
  {
    "objectID": "referencias.html",
    "href": "referencias.html",
    "title": "Referencias",
    "section": "",
    "text": "McKinney, Wes. 2017. Python for Data Analysis: Data Wrangling with\nPandas, NumPy, and IPython. 2nd ed. O’Reilly Media, Inc."
  },
  {
    "objectID": "01-tablas-de-datos.html#pandas-para-la-manipular-y-analizar-datos",
    "href": "01-tablas-de-datos.html#pandas-para-la-manipular-y-analizar-datos",
    "title": "1  Tablas de Datos",
    "section": "1.2 pandas para la manipular y analizar datos",
    "text": "1.2 pandas para la manipular y analizar datos\nEn lo que sigue usaremos la librería [pandas]3"
  },
  {
    "objectID": "01-tablas-de-datos.html#la-librería-pandas",
    "href": "01-tablas-de-datos.html#la-librería-pandas",
    "title": "1  Tablas de datos",
    "section": "1.2 La librería pandas",
    "text": "1.2 La librería pandas\nEn lo que sigue usaremos la librería de Python llamada pandas3. pandas provee de estructuras de datos y funciones especialmente diseñadas para el análisis y la manipulación de datos.\nPara practicar junto con la lectura de este apunte, te recomendamos el uso de algún entorno online que permita ejecutar código de Python tales como Google Colab o Kaggle Notebooks. La ventaja usar alguno de estos servicios es evitar la necesidad de realizar cualquier instalación local en el computador en el que se está trabajando.\nSi por el contrario deseas utilizar un entorno local, puedes seguir las instrucciones de instalación de Python y pandas disponibles aquí.\nCada vez que queramos utilizar pandas en un script o notebook de Python debemos cargar la librería de la siguiente manera:\n\nimport pandas as pd\n\nA través de este comando, le estamos diciendo a Python que importe todas las funciones de pandas y que utilice el “apodo” pd referirse a la librería, esto permitirá que más adelante podamos escribir pd en lugar de pandas en nuestro código."
  },
  {
    "objectID": "01-tablas-de-datos.html#cargado-de-tablas",
    "href": "01-tablas-de-datos.html#cargado-de-tablas",
    "title": "1  Tablas de datos",
    "section": "1.3 Cargado de tablas",
    "text": "1.3 Cargado de tablas\nHacer analítica descriptiva de datos sin datos es equivalente a surfear sin agua. Partamos por usar pandas para cargar datos.\nLos datos tienen en general varias fuentes, estas pueden ser:\n\ndatos almacenados en una disco duro local o remoto,\ndatos almacenados en servidores online,\ndatos incluídos en una librería de Python.\n\n\n1.3.1 Cargado desde un archivo\nAl cargar datos que están almacenados en un archivo, hay dos preguntas a responder:\n\n¿En qué formato están almacenados los datos del archivo?\n¿Dónde está ubicado el archivo?\n\nHay muchas formas en que es posible almacenar datos en un archivo. Algunos de los formatos más comunes son:\n\nEl formato csv. La sigla “csv” proviene de “comma separated values” (valores separados por coma).\nEl formato xls. Este corresponde a un formato de archivos usado por Microsoft Excel hasta el año 2006.\nEl formato xlsx. Este corresponde a un formato de archivos usado por Microsoft Excel a partir del año 2007. Es un formato más moderno basado en Open XML, otro formato más general aún.\nEl formato json (JavaScript Object Notation). Este en formato estándar abierto que utiliza una estructura muy parecida a los diccionario de Python, con pares de llaves y valores.\nFormatos propietaros de sistemas de software para el análisis de datos como dta (Stata), sav (SPSS), sas7bdat, sd7, sd2, ssd01(SAS), y otros.\n\nLo importante es que pandas puede leer todos los formatos antes mencionados, y muchos otros. Los más comunes de estos son csv y xls/xlsx. Para más información acerca de otros tipos de archivo, consulta la documentación de pandas.\nPara cargar un archivo csv, usamos:\n\nmi_tabla = pd.read_csv(\"mi-archivo-con-datos.csv\")\n\nPara cargar un archivo xls o xlsx, usamos:\n\nmi_tabla = pd.read_excel(\"data/mi-archivo-con-datos.xlsx\")\n\n\n\n\n\n\n\nNote\n\n\n\nPodemos especificar la hoja del archivo de MS Excel que queremos cargar con el argumento sheet-name. Para más información, ver la documentación de la función read_excel.\n\n\nObserva que en el ejemplo anterior, además de indicar el nombre del archivo, indicamos el directorio en que está ubicado. En este caso, el archivo está dentro de un directorio llamado data.\nPrueba cargando el archivo ejemplo-notas.csv, que está disponible en el siguiente link4. De hecho, usaremos este archivo en el resto de este capítulo.\n\n\n1.3.2 Cargando desde un archivo en internet\nTambién podemos cargar datos desde un archivo disponible online. Para esto basta conocer la dirección (o URL) del archivo en cuestión. Por ejemplo, también podrías cargar la base de datos ejemplo-notas.csv usando el comando:\n\nnotas = pd.read_csv(\"https://raw.githubusercontent.com/rocarvaj/analitica-descriptiva/main/datos/ejemplo-notas.csv\")\n\n\n\n1.3.3 DataFrame\nEn los ejemplos anteriores las funciones pd.read_csv() y pd.read_excel() retornan un objeto de tipo DataFrame. El DataFrame es la estructura de datos primaria de pandas y está especialmente diseñada para almacenar datos en formato tabular."
  },
  {
    "objectID": "01-tablas-de-datos.html#inspección-de-tablas",
    "href": "01-tablas-de-datos.html#inspección-de-tablas",
    "title": "1  Tablas de datos",
    "section": "1.4 Inspección de tablas",
    "text": "1.4 Inspección de tablas\nEn esta sección veremos como usar pandas para inspeccionar una tabla de datos. Es decir, para determinar rápidamente cuántas variables y observaciones tiene, y más o menos, qué valores toman. Para ellos, usaremos la base de datos notas que cargamos a modo de ejemplo en la sección “Cargado desde un archivo”.\nEsta base de datos tienes las características de algunos alumnos de un curso ficticio, junto con sus notas y asistencia.\nPodemos mirar la base de datos simplemente escribiendo su nombre:\n\nnotas\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      0\n      Diego Alberto Rojas\n      Masculino\n      23\n      Chile\n      7.0\n      3.5\n      6.3\n      3.5\n      6.0\n      5.7\n      12\n    \n    \n      1\n      Bernarda Antonia Chen\n      Femenino\n      25\n      Perú\n      3.0\n      4.1\n      4.4\n      5.0\n      6.7\n      4.2\n      9\n    \n    \n      2\n      Tito Lenin Pérez\n      Masculino\n      40\n      Costa Rica\n      5.3\n      4.8\n      4.5\n      5.5\n      6.0\n      5.0\n      13\n    \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      4\n      Claudia María Valencia\n      Femenino\n      24\n      Perú\n      5.8\n      1.0\n      6.2\n      7.0\n      6.2\n      7.0\n      15\n    \n    \n      5\n      José Esteban Iruarrizaga\n      Masculino\n      18\n      Costa Rica\n      3.8\n      2.3\n      4.1\n      3.7\n      5.0\n      4.0\n      6\n    \n    \n      6\n      Federica Von Müller\n      Femenino\n      22\n      Alemania\n      6.0\n      5.0\n      6.0\n      6.1\n      6.0\n      7.0\n      16\n    \n    \n      7\n      Rodolfo José Mamani\n      Masculino\n      29\n      Bolivia\n      6.8\n      4.0\n      7.0\n      6.5\n      4.3\n      3.8\n      11\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nPara poder mirar rápidamente algunas características de la tabla de datos, podemos usar los atributos o métodos que se listan a continuación. Si la descripción no te queda muy clara en una primera lectura, no te preocupes porque mostraremos ejemplos de su uso a continuación.\n\nshape: Entrega las dimensiones de la tabla (número filas y columnas).\ncolumns: Entrega los nombres de las columnas de la tabla.\ndescribe(): Entrega un un resumen de estadísticas descriptivas para las variables.\nunique(): Entrega el conjunto de valores únicos que toman una o más columnas.\nvalue_counts(): Cuenta el número de valores únicos que toman una o más columnas.\n\n\nEjemplo\nInspeccionemos la base de datos notas.\nEmpecemos determinando el número de filas (observaciones) y columnas (variables) que esta base tiene.\n\nnotas.shape\n\n(10, 11)\n\n\nVemos que tiene 10 filas (alumnos), y 11 columnas (variables).\nPodemos conocer el nombre de estas 11 columnas usando el atributo columns.\n\nnotas.columns\n\nIndex(['Nombre', 'Género', 'Edad', 'País', 'Prueba 1', 'Prueba 2', 'Tarea 1',\n       'Tarea 2', 'Tarea 3', 'Examen', 'Asistencia'],\n      dtype='object')\n\n\nAl parecer esta tabla tiene las notas de los alumnos en dos pruebas, 4 tareas y el examen. Además hay una variable que tiene la asistencia de cada alumnos a clases.\nSupongamos que nos interesa explorar la variable País con mayor profundidad. Empecemos viendo qué valores puede tomar esta variable, usando el método unique.\n\nnotas['País'].unique()\n\narray(['Chile', 'Perú', 'Costa Rica', 'Alemania', 'Bolivia'], dtype=object)\n\n\nEsto nos muestra que la variable País toma 5 valores posibles (hay alumnos de 5 países). Si queremos ver en más detalle cómo se distribuyen estos valores, podemos usar el método value_counts().\n\n\n\n\n\n\nNote\n\n\n\nNota que para usar el método unique() hemos seleccionado la variable País desde el DataFrame, usando la sintáxis de “corchetes” (‘[’ y ‘]’). Hablaremos más en detalle de esto en la secciones relacionadas con la selección de filas y columnas.\n\n\n\nnotas.value_counts('País')\n\nPaís\nChile         3\nCosta Rica    3\nPerú          2\nAlemania      1\nBolivia       1\ndtype: int64\n\n\nEs decir, la mayor cantidad de alumnos provienen de Chile y Costa Rica.\nSi nos interesa ver, por ejemplo, cuántas observaciones hay de cada valor de País y género, podemos usar count también.\n\nnotas.value_counts(['País', 'Género'])\n\nPaís        Género   \nChile       Femenino     2\nCosta Rica  Masculino    2\nPerú        Femenino     2\nAlemania    Femenino     1\nBolivia     Masculino    1\nChile       Masculino    1\nCosta Rica  Femenino     1\ndtype: int64\n\n\nEs decir, la combinaciones más frecuentes de País y Género en la clase son: mujeres chilenas, hombres costarricenses y mujeres peruanas."
  },
  {
    "objectID": "01-tablas-de-datos.html#subconjuntos-de-filas",
    "href": "01-tablas-de-datos.html#subconjuntos-de-filas",
    "title": "1  Tablas de datos",
    "section": "1.5 Subconjuntos de filas",
    "text": "1.5 Subconjuntos de filas\nUna tarea común al explorar una tabla de datos es seleccionar o filtrar algunas observaciones. Para ello, utilizamos la sintáxis .loc[].\nPor ejemplo, si queremos seleccionar sólo a las alumnas del curso:\n\nnotas.loc[notas['Género'] == \"Femenino\"]\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      1\n      Bernarda Antonia Chen\n      Femenino\n      25\n      Perú\n      3.0\n      4.1\n      4.4\n      5.0\n      6.7\n      4.2\n      9\n    \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      4\n      Claudia María Valencia\n      Femenino\n      24\n      Perú\n      5.8\n      1.0\n      6.2\n      7.0\n      6.2\n      7.0\n      15\n    \n    \n      6\n      Federica Von Müller\n      Femenino\n      22\n      Alemania\n      6.0\n      5.0\n      6.0\n      6.1\n      6.0\n      7.0\n      16\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nPuedes notar que la salida de este comando es una tabla de datos, pero que sólo contiene filas correspondientes a alumnas del curso.\nEl formato general en que usamos este comando es:\n\ndatos.loc[<condición>] en donde <condición> es alguna condición sobre ciertas variables que tienen que satisfacer las filas a seleccionar (por ejemplo, “alumnos que hayan obtenido nota mayor o igual a 4.0 en la Prueba 2”).\n\n\n1.5.1 Subconjuntos por valor\nPara generar las condiciones que nos permitirán seleccionar filas, usaremos los siguientes comparadores, operadores y comandos:\n\n>, <, >=, <=, ==: Comparadores de orden (más detalles en la sección “[Operadores de comparación]”).\n|, &, xor, !: Operadores lógicos (más detalles en la sección “[Conectores lógicos y negación]”).\nbetween: Permite identificar valores que caen en un rango determinado.\nstr_detect: Detectar un string dentro de una variable.\nisin(): Condición de pertenencia a una colección de valores.\n\n\nEjemplos\nVeamos ahora qué alumnas aprobaron la Prueba 1 (obtuvieron una nota mayor o igual a 4.0). Es decir, la condición que buscamos es “alumna” y “nota en Prueba 1 mayor o igual a 4.0”.\n\nnotas.loc[(notas['Género'] == \"Femenino\") & (notas['Prueba 1'] >= 4.0)] \n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      4\n      Claudia María Valencia\n      Femenino\n      24\n      Perú\n      5.8\n      1.0\n      6.2\n      7.0\n      6.2\n      7.0\n      15\n    \n    \n      6\n      Federica Von Müller\n      Femenino\n      22\n      Alemania\n      6.0\n      5.0\n      6.0\n      6.1\n      6.0\n      7.0\n      16\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nSi queremos seleccionar a los alumnos cuya edad está entre 25 y 30 años, pordemos usar el comando:\n\n#notas %>% filter(between(Edad, 25, 30))\n\nPara filtrar strings que contienen algún texto en particular se puede usar el método str.contains(). Por ejemplo, podemos seleccionar sólo a aquellos alumnos que tengan nombre “María” o “José”:\n\nnotas.loc[(notas['Nombre'].str.contains(\"María\")) | (notas['Nombre'].str.contains(\"José\"))]\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      4\n      Claudia María Valencia\n      Femenino\n      24\n      Perú\n      5.8\n      1.0\n      6.2\n      7.0\n      6.2\n      7.0\n      15\n    \n    \n      5\n      José Esteban Iruarrizaga\n      Masculino\n      18\n      Costa Rica\n      3.8\n      2.3\n      4.1\n      3.7\n      5.0\n      4.0\n      6\n    \n    \n      7\n      Rodolfo José Mamani\n      Masculino\n      29\n      Bolivia\n      6.8\n      4.0\n      7.0\n      6.5\n      4.3\n      3.8\n      11\n    \n  \n\n\n\n\nSi queremos filtrar usando algunos valores particulares de las variables, usamos la condición de pertenencia usando la expresión isin(). Por ejemplo, si queremos sólo seleccionar a los alumnos de Chile y Costa Rica:\n\nnotas.loc[notas['País'].isin([\"Chile\", \"Costa Rica\"])]\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      0\n      Diego Alberto Rojas\n      Masculino\n      23\n      Chile\n      7.0\n      3.5\n      6.3\n      3.5\n      6.0\n      5.7\n      12\n    \n    \n      2\n      Tito Lenin Pérez\n      Masculino\n      40\n      Costa Rica\n      5.3\n      4.8\n      4.5\n      5.5\n      6.0\n      5.0\n      13\n    \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      5\n      José Esteban Iruarrizaga\n      Masculino\n      18\n      Costa Rica\n      3.8\n      2.3\n      4.1\n      3.7\n      5.0\n      4.0\n      6\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nEste comando es equivalente a:\n\nnotas.loc[(notas['País'] == \"Chile\") | (notas['País'] == \"Costa Rica\")]\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      0\n      Diego Alberto Rojas\n      Masculino\n      23\n      Chile\n      7.0\n      3.5\n      6.3\n      3.5\n      6.0\n      5.7\n      12\n    \n    \n      2\n      Tito Lenin Pérez\n      Masculino\n      40\n      Costa Rica\n      5.3\n      4.8\n      4.5\n      5.5\n      6.0\n      5.0\n      13\n    \n    \n      3\n      María Marcia González\n      Femenino\n      25\n      Chile\n      6.8\n      7.0\n      7.0\n      7.0\n      6.8\n      6.5\n      14\n    \n    \n      5\n      José Esteban Iruarrizaga\n      Masculino\n      18\n      Costa Rica\n      3.8\n      2.3\n      4.1\n      3.7\n      5.0\n      4.0\n      6\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nPero puede ser más compacto cuando se trata de filtrar usando muchos valores.\n\n\n\n1.5.2 Subconjuntos por posición\nOtra de las maneras de seleccionar filas en una tabla de datos es través de su posición en esta. Para ello usamos los métodos head() y tail(), las cuales entregan las primeras filas (cabeza) o las últimas filas (cola) de la tabla. Esta función recibe como argumento el número de filas que queremos.\n\nEjemplos\nPor ejemplo, si queremos los 3 primeros alumnos de lista:\n\nnotas.head(3)\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      0\n      Diego Alberto Rojas\n      Masculino\n      23\n      Chile\n      7.0\n      3.5\n      6.3\n      3.5\n      6.0\n      5.7\n      12\n    \n    \n      1\n      Bernarda Antonia Chen\n      Femenino\n      25\n      Perú\n      3.0\n      4.1\n      4.4\n      5.0\n      6.7\n      4.2\n      9\n    \n    \n      2\n      Tito Lenin Pérez\n      Masculino\n      40\n      Costa Rica\n      5.3\n      4.8\n      4.5\n      5.5\n      6.0\n      5.0\n      13\n    \n  \n\n\n\n\nO los últimos 4 alumnos de la lista:\n\nnotas.tail(4)\n\n\n\n\n  \n    \n      \n      Nombre\n      Género\n      Edad\n      País\n      Prueba 1\n      Prueba 2\n      Tarea 1\n      Tarea 2\n      Tarea 3\n      Examen\n      Asistencia\n    \n  \n  \n    \n      6\n      Federica Von Müller\n      Femenino\n      22\n      Alemania\n      6.0\n      5.0\n      6.0\n      6.1\n      6.0\n      7.0\n      16\n    \n    \n      7\n      Rodolfo José Mamani\n      Masculino\n      29\n      Bolivia\n      6.8\n      4.0\n      7.0\n      6.5\n      4.3\n      3.8\n      11\n    \n    \n      8\n      Adriana Violeta Antillán\n      Femenino\n      20\n      Chile\n      5.1\n      5.2\n      7.0\n      7.0\n      5.0\n      5.5\n      16\n    \n    \n      9\n      Qingxia Esmeralda Quiñones\n      Femenino\n      26\n      Costa Rica\n      6.0\n      5.8\n      1.0\n      4.0\n      5.5\n      4.9\n      12\n    \n  \n\n\n\n\nNota que cuando nos referimos a las “primeras” o “últimas” filas, esto es sólo relativo a la forma en que la tabla venía ordenada originalmente. Dependiendo de cómo ordenemos la tabla, estas filas tendrán o un sentido. Lo veremos más adelante, en la sección “[Ordenamiento de filas]”."
  }
]